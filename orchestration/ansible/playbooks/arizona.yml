# install python for full ansible support
- hosts: tag_Project_arizona:&tag_ClusterName_{{ cluster_name }}:&{{ aws_region }}
  tasks:
  - name: Gather ec2 facts
    action: ec2_facts
  - name: Gather sriov status
    shell: aws ec2 describe-instance-attribute --instance-id {{ ansible_ec2_instance_id }} --attribute sriovNetSupport --output text | grep -o simple
    register: sriov_status
    delegate_to: 127.0.0.1
    become: no
    ignore_errors: yes
  - name: "Stop the AWS instance"
    local_action:
      module: ec2
      state: stopped
      instance_ids: "{{ ansible_ec2_instance_id }}"
      region: "{{ ansible_ec2_placement_region }}"
      wait: yes
    when: sriov_status.stdout != "simple"
  - name: enable sriov
    shell: aws ec2 modify-instance-attribute --instance-id {{ ansible_ec2_instance_id }} --sriov-net-support simple
    delegate_to: 127.0.0.1
    become: no
    when: sriov_status.stdout != "simple"
  - name: Gather sriov status after
    shell: aws ec2 describe-instance-attribute --instance-id {{ ansible_ec2_instance_id }} --attribute sriovNetSupport --output text | grep -o simple
    register: sriov_status_after
    delegate_to: 127.0.0.1
    become: no
  - name: Assert that sriov is enabled
    assert: { that: "sriov_status_after.stdout == 'simple'" }
  - name: "Start the AWS instance"
    local_action:
      module: ec2
      state: running
      instance_ids: "{{ ansible_ec2_instance_id }}"
      region: "{{ ansible_ec2_placement_region }}"
      wait: yes
    when: sriov_status.stdout != "simple"
  - name: wait for ssh
    pause:
      seconds: 30
    delegate_to: 127.0.0.1
    when: sriov_status.stdout != "simple"
  - name: Refresh EC2 cache
    command: "{{ playbook_dir }}/../ec2.py --refresh-cache"
    delegate_to: 127.0.0.1
  - name: Refresh in-memory EC2 cache
    meta: refresh_inventory

# create dynamic groups
- hosts: tag_Project_arizona:&tag_Role_follower:&tag_ClusterName_{{ cluster_name }}:&{{ aws_region }}
  tasks:
  - name: Create a group of all followers for arizona
    group_by: key=arizona-followers
  - name: set hostname
    hostname: name=arizona-follower-{{ groups['arizona-followers'].index(inventory_hostname) + 1 }}
    become: yes
  - name: "Add follower hostnames to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*arizona-follower-{{ groups['arizona-followers'].index(item) + 1 }}$
      line: "{{ hostvars[item].ansible_default_ipv4.address }} arizona-follower-{{ groups['arizona-followers'].index(item) + 1 }}"
      state: present
    become: yes
    with_inventory_hostnames: arizona-followers
  - name: "Add leader hostnames to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*arizona-leader-{{ groups['arizona-leaders'].index(item) + 1 }}$
      line: "{{ hostvars[item].ansible_default_ipv4.address }} arizona-leader-{{ groups['arizona-leaders'].index(item) + 1 }}"
      state: present
    become: yes
    with_inventory_hostnames: arizona-leaders

- hosts: tag_Project_arizona:&tag_Role_leader:&tag_ClusterName_{{ cluster_name }}:&{{ aws_region }}
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
  tasks:
  - name: Create a group of all leaders for arizona
    group_by: key=arizona-leaders
  - name: Set IPs for ptpd unicast
    set_fact: ptpd_destinations="{% if groups['arizona-followers'] is defined %}{% for host in groups['arizona-followers'] %}{{ hostvars[host]['ansible_' + ethernet_interface]['ipv4']['address'] }}{% if not loop.last %},{% endif %}{% endfor %}{% else %}127.0.0.1{% endif %}"
  - name: set hostname
    hostname: name=arizona-leader-{{ groups['arizona-leaders'].index(inventory_hostname) + 1 }}
    become: yes
  - name: "Add follower hostnames to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*arizona-follower-{{ groups['arizona-followers'].index(item) + 1 }}$
      line: "{{ hostvars[item].ansible_default_ipv4.address }} arizona-follower-{{ groups['arizona-followers'].index(item) + 1 }}"
      state: present
    become: yes
    with_inventory_hostnames: arizona-followers
  - name: "Add leader hostnames to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*arizona-leader-{{ groups['arizona-leaders'].index(item) + 1 }}$
      line: "{{ hostvars[item].ansible_default_ipv4.address }} arizona-leader-{{ groups['arizona-leaders'].index(item) + 1 }}"
      state: present
    become: yes
    with_inventory_hostnames: arizona-leaders

- hosts: arizona-leaders:arizona-followers
  tasks:
  - name: Create a group of all hosts for arizona
    group_by: key=arizona-all
  - name: Gather ec2 facts
    action: ec2_facts

# Apply common configuration to all hosts
- hosts: arizona-all
  tasks:
  - name: Rename ec2 instance name tag
    ec2_tag:
      region: "{{ ansible_ec2_placement_region }}"
      resource: "{{ ansible_ec2_instance_id }}"
      state: present
      tags:
        Name: "{{ cluster_name }}:{{ ansible_hostname }}"
  - name: Check if cset is installed
    stat: path=/usr/bin/cset
    register: cset
  - name: install cset utility
    yum:
      name: https://s3.amazonaws.com/sendence-dev/installers/cset/cpuset-1.5.6-2.2.x86_64.rpm
      state: present
    when: not cset.stat.exists
    become: yes
  - name: apply kernel tweaks
    script: roles/common/files/kerneltweaks_arizona.sh > /kerneltweaks.out
    become: yes
  - name: create cpu shield
    script: roles/common/files/create_cpu_shield.sh {{ system_cpus if system_cpus is defined else "" }} > /create_cpu_shield.out
    become: yes
  - name: Put ssh private key onto server
    copy:
      src: "{{ ssh_key_file }}"
      dest: /home/{{ ansible_user_id }}/.ssh/id_rsa
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: 0700


# Configure and deploy leader servers.
- hosts: arizona-leaders
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
    ptpd_role: master
    ptpd_transport: unicast
  tasks:
  - name: uninstall normal ptpd
    yum:
      name: ptpd
      state: absent
    when: ptpd_experimental == 'true'
    become: yes
  - name: install ptpd experimental
    yum:
      name: https://s3.amazonaws.com/sendence-dev/installers/ptpd/ptpd-experimental-2.3.2-1.el6.x86_64.rpm
      state: present
    when: ptpd_experimental == 'true'
    become: yes
  - name: Update ptpd config
    replace:
      dest: /etc/sysconfig/ptpd
      regexp: ^PTPD_EXTRA_OPTIONS=.*
      replace: PTPD_EXTRA_OPTIONS="{{ '--unicast' if ptpd_transport == "unicast" else '' }} {{ '--unicast-destinations' if ptpd_destinations is defined else '' }} {{ ptpd_destinations if ptpd_destinations is defined else '' }} --log-file /var/log/ptpd.log --statistics-file /var/log/ptpd-stats.log --{{ ptpd_role }}only --interface {{ ethernet_interface }} --ptpengine:use_libpcap=Y --ptpengine:clock_class={{ 127 if ptpd_role == "master" else 255 }} --ptpengine:panic_mode=Y --ptpengine:panic_mode_exit_threshold=100000000 --clock:max_offset_ppm=1000 --global:cpuaffinity_cpucore=0"
    become: yes
  - name: restart ptpd
    service: name=ptpd state=restarted
    become: yes

# Configure and deploy follower servers.
- hosts: arizona-followers
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
    ptpd_role: slave
    ptpd_transport: unicast
  tasks:
  - name: uninstall normal ptpd
    yum:
      name: ptpd
      state: absent
    when: ptpd_experimental == 'true'
    become: yes
  - name: install ptpd experimental
    yum:
      name: https://s3.amazonaws.com/sendence-dev/installers/ptpd/ptpd-experimental-2.3.2-1.el6.x86_64.rpm
      state: present
    when: ptpd_experimental == 'true'
    become: yes
  - name: Update ptpd config
    replace:
      dest: /etc/sysconfig/ptpd
      regexp: ^PTPD_EXTRA_OPTIONS=.*
      replace: PTPD_EXTRA_OPTIONS="{{ '--unicast' if ptpd_transport == "unicast" else '' }} {{ '--unicast-destinations' if ptpd_destinations is defined else '' }} {{ ptpd_destinations if ptpd_destinations is defined else '' }} --log-file /var/log/ptpd.log --statistics-file /var/log/ptpd-stats.log --{{ ptpd_role }}only --interface {{ ethernet_interface }} --ptpengine:use_libpcap=Y --ptpengine:clock_class={{ 127 if ptpd_role == "master" else 255 }} --ptpengine:panic_mode=Y --ptpengine:panic_mode_exit_threshold=100000000 --clock:max_offset_ppm=1000 --global:cpuaffinity_cpucore=0"
    become: yes
  - name: restart ptpd
    service: name=ptpd state=restarted
    become: yes


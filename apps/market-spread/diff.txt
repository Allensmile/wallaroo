diff --git a/lib/buffy/metrics/metrics-collections.pony b/lib/buffy/metrics/metrics-collections.pony
index 68b09de..2b52924 100644
--- a/lib/buffy/metrics/metrics-collections.pony
+++ b/lib/buffy/metrics/metrics-collections.pony
@@ -70,13 +70,14 @@ a latency histogram and a throughput history.
       let t0: I64 = ((_periods(idx) - _period)/1_000_000_000).i64()
       let j': JsonObject ref = JsonObject
       j'.data.update("category", category)
-      j'.data.update("pipeline_key", recover
-        let s = String(50)
-        s.append(name)
-        s.append(":")
-        s.append(id.string())
-        consume s
-        end)
+      j'.data.update("pipeline_key", name)
+      // j'.data.update("pipeline_key", recover
+      //   let s = String(50)
+      //   s.append(name)
+      //   s.append(":")
+      //   s.append(id.string())
+      //   consume s
+      //   end)
       j'.data.update("t1", t1)
       j'.data.update("t0", t0)
       let topics: JsonObject ref = JsonObject
diff --git a/lib/sendence/new-fix/fixish-messages.pony b/lib/sendence/new-fix/fixish-messages.pony
index dbab2d1..49e2491 100644
--- a/lib/sendence/new-fix/fixish-messages.pony
+++ b/lib/sendence/new-fix/fixish-messages.pony
@@ -119,4 +119,4 @@ primitive FixishMsgDecoder
     else
       @printf[I32]("FIXISH: Problem decoding bits for 8 byte chunk\n".cstring())
       0
-    end
\ No newline at end of file
+    end
diff --git a/monitoring_hub/apps/metrics_reporter/lib/metrics_reporter/latency_stats_calculator.ex b/monitoring_hub/apps/metrics_reporter/lib/metrics_reporter/latency_stats_calculator.ex
index a04e306..3782411 100644
--- a/monitoring_hub/apps/metrics_reporter/lib/metrics_reporter/latency_stats_calculator.ex
+++ b/monitoring_hub/apps/metrics_reporter/lib/metrics_reporter/latency_stats_calculator.ex
@@ -8,8 +8,12 @@ defmodule MetricsReporter.LatencyStatsCalculator do
   end
 
   def calculate_cumalative_latency_percentage_bins_data(latency_percentage_bins_data) do
-    {_, cumalative_latency_percentage_bins_data} = latency_percentage_bins_data
-      |> Enum.reduce({0, %{}}, fn {key, val}, {cumalative_percentage, cumalative_latency_percentage_bins_data} ->
+      sorted_keys = Map.keys(latency_percentage_bins_data)
+        |> Enum.sort(&(String.to_integer(&1)< String.to_integer(&2)))
+
+    {_, cumalative_latency_percentage_bins_data} = sorted_keys
+      |> Enum.reduce({0, %{}}, fn key, {cumalative_percentage, cumalative_latency_percentage_bins_data} ->
+        val = Map.get(latency_percentage_bins_data, key)
         cumalative_percentage = calculate_cumalative_percentage(val, cumalative_percentage)
         cumalative_latency_percentage_bins_data = Map.put(cumalative_latency_percentage_bins_data, key, cumalative_percentage)
         {cumalative_percentage, cumalative_latency_percentage_bins_data}
@@ -70,10 +74,11 @@ defmodule MetricsReporter.LatencyStatsCalculator do
                 {updated_keys_list, Map.put(acc_map, bin, acc_count)}
               end)
 
-      get_empty_latency_percentage_bins_data(expected_latency_bins)
+      map = get_empty_latency_percentage_bins_data(expected_latency_bins)
         |> Map.merge(aggregated_map, fn _k, v1, v2 ->
           calculate_percentile(v2, total_count)
         end)
+      map
         |> Map.new(fn {k, v} ->
           pow_key = :math.pow(2, String.to_integer(k)) |> round |> to_string
           {pow_key, v} end)

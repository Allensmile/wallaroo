#!/usr/bin/env python3

import click
from summarize import (file_line_iter,
                       parse_giles_line)


def summarize_file(file_path):
    count, min_ts, max_ts = 0, None, None
    for l in file_line_iter(file_path):
        count += 1
        ts, _ = parse_giles_line(l)
        min_ts = ts if min_ts is None else min(min_ts, ts)
        max_ts = ts if max_ts is None else max(max_ts, ts)
    return min_ts, max_ts, count



@click.command()
@click.option('--sent', '-s', nargs=1, required=True, type=str,
              help='Path of the giles sent file')
@click.option('--recd', '-r', nargs=1, required=True, type=str,
              help='Path of the giles received file in readable format')
@click.option('--count-lines', '-c', is_flag=True,
              help="Fail if line counts don't match")
@click.option('--expect-lines', '-e', type=int, default=0,
              help="Specify number of lines to expect from received file")
def run_length(sent, recd, count_lines, expect_lines):
    """Read a giles sent.txt and received.txt to produce a total run-length"""
    sent_min, sent_max, sent_lines = summarize_file(sent)
    recd_min, recd_max, recd_lines = summarize_file(recd)
    if expect_lines > 0:
        if recd_lines != expect_lines:
            print("Received file line count doesn't match expected value. "
                  "Expected %d but got %d" % (expect_lines, recd_lines))
            exit(1)
    if count_lines:
        if sent_lines != recd_lines:
            print("Line counts don't match. %d sent vs. %d "
                "received." % (sent_lines, recd_lines))
            exit(1)
    print("{:.9f}".format(recd_max - sent_min))
    exit(0)


if __name__ == '__main__':
    run_length()
